name: Upload Release Asset


on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10


jobs:
  build_ubuntu:
    name: Build Release Asset - Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.14
        uses: actions/setup-go@v1
        with:
          go-version: 1.14

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Checkout code
        uses: actions/checkout@v1

      - name: Build project
        run: |
          go mod vendor
          go install
          export ARTIFACT_PATH=`go env GOPATH`/bin/peacemakr-cli
          cp $ARTIFACT_PATH ./peacemakr-cli
          tar -pczf peacemakr-cli-linux.tar.gz peacemakr-cli

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-artifact@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: ./peacemakr-cli-linux.tar.gz
          name: peacemakr-cli-linux.tar.gz

  build_macos:
    name: Build Release Asset - macOS
    runs-on: macos-10.15
    steps:
      - name: Set up Go 1.14
        uses: actions/setup-go@v1
        with:
          go-version: 1.14

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Checkout code
        uses: actions/checkout@v1

      - name: Build project
        run: |
          go mod vendor
          go install
          export ARTIFACT_PATH=`go env GOPATH`/bin/peacemakr-cli
          cp $ARTIFACT_PATH ./peacemakr-cli
          tar -pczf peacemakr-cli-Darwin_amd64.tar.gz peacemakr-cli

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-artifact@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: ./peacemakr-cli-Darwin_amd64.tar.gz
          name: peacemakr-cli-Darwin_amd64.tar.gz

  upload_release:
    name: Create and Upload Release
    needs: [build_ubuntu, build_macos]
    runs-on: ubuntu-latest
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Download macOS
        uses: actions/download-artifact@v1
        with:
          name: peacemakr-cli-Darwin_amd64.tar.gz
          path: /tmp/peacemakr-cli-Darwin_amd64.tar.gz

      - name: Download Ubuntu
        uses: actions/download-artifact@v1
        with:
          name: peacemakr-cli-linux.tar.gz
          path: /tmp/peacemakr-cli-linux.tar.gz

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset - macOS
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/peacemakr-cli-Darwin_amd64.tar.gz/peacemakr-cli-Darwin_amd64.tar.gz
          asset_name: peacemakr-cli-Darwin_amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset - Ubuntu
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/peacemakr-cli-linux.tar.gz/peacemakr-cli-linux.tar.gz
          asset_name: peacemakr-cli-linux.tar.gz
          asset_content_type: application/gzip

  # build_docker:
  #   name: Build and Release Docker containers
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Get the version
  #       id: get_version
  #       run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  #     - name: Checkout code
  #       uses: actions/checkout@v1

  #     - name: Publish docker images
  #       run: |
  #         docker build -t corecrypto-dependencies:latest . -f docker/go-dependencies.Dockerfile --build-arg="CMAKE_BUILD_TYPE=RELEASE"
  #         docker tag corecrypto-dependencies:latest docker.pkg.github.com/peacemakr-io/peacemakr-core-crypto/corecrypto-dependencies:${{ steps.get_version.outputs.VERSION }}

  #         docker build -t corecrypto:latest . -f docker/go.Dockerfile
  #         docker tag corecrypto:latest docker.pkg.github.com/peacemakr-io/peacemakr-core-crypto/corecrypto:${{ steps.get_version.outputs.VERSION }}

  #         docker login docker.pkg.github.com -u peacemakr-io -p ${{ secrets.GITHUB_TOKEN }}

  #         docker push docker.pkg.github.com/peacemakr-io/peacemakr-core-crypto/corecrypto-dependencies:${{ steps.get_version.outputs.VERSION }}
  #         docker push docker.pkg.github.com/peacemakr-io/peacemakr-core-crypto/corecrypto:${{ steps.get_version.outputs.VERSION }}